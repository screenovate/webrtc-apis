/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */


namespace org
{
  namespace webRtc
  {
    /// <summary>
    /// The event is fired when an audio buffer is ready for processing.
    /// <summary>
    [disposable]
    interface VideoFrameBufferEvent
    {
      [constructor, delete, default]
      void VideoFrameBufferEvent();

      /// <summary>
      /// Gets the video buffer for further processing.
      /// <summary>
      [getter]
      VideoFrameBuffer buffer;
    };

    /// <summary>
    /// A MediaStreamTrack object represents a media source in the User Agent.
    /// An example source is a device connected to the User Agent. Other
    /// specifications may define sources for MediaStreamTrack that override
    /// the behavior specified here. Several MediaStreamTrack objects can
    /// represent the same media source, e.g., when the user chooses the
    /// same camera in the UI shown by two consecutive calls to getUserMedia().
    /// </summary>
    [disposable]
    interface MediaStreamTrack
    {
      [constructor,delete]
      void MediaStreamTrack();
      
      /// <summary>
      /// Creates an audio MediaStreamTrack for use with an RtpSender.
      /// </summary>
      [static]
      MediaStreamTrack createAudioTrack(
        WebRtcFactory factory,
        string label,
        AudioTrackSource source);

      /// <summary>
      /// Creates a video MediaStreamTrack for use with an RtpSender.
      /// </summary>
      [static]
      MediaStreamTrack createVideoTrack(
        WebRtcFactory factory,
        string label,
        VideoCapturer source);

      /// <summary>
      /// Gets the kind attribute. MUST return the string "audio" if
      /// this object represents an audio track or "video" if this
      /// object represents a video track.
      /// </summary>
      [getter]
      string kind;

      /// <summary>
      /// Gets the User Agent generated identifier string, and MUST initialize
      /// the object's id attribute to that string, unless the object is
      /// created as part of a special purpose algorithm that specifies
      /// how the stream id must be initialized. See MediaStream's id
      /// attribute for guidelines on how to generate such an identifier.
      /// </summary>
      [getter]
      string id;

      /// <summary>
      /// Gets or sets the enabled state for the object.
      /// </summary>
      [getter,setter]
      bool enabled;

      /// <summary>
      /// Gets the state of the track. It MUST return the value as most
      /// recently set by the User Agent.
      /// </summary>
      [getter]
      MediaStreamTrackState state;

      /// <summary>
      /// Gets the media source to attach to a renderer like a MediaElement.
      /// </summary>
      [getter]
      MediaSource source;

      /// <summary>
      /// Gets or sets the media element which will auto-attach any media sources as they change.
      /// </summary>
      [getter, setter]
      MediaElement element;
      
      /// <summary>
      ///  This method resets the mediasource
      /// </summary>
      void resetSource();

      /// <summary>
      /// Event indicates when the MediaSource changes and needs to be reattached to a rendering MediaElement.
      /// </summary>
      [event]
      void onMediaSourceChanged();

      /// <summary>
      /// Event indicates the source resolution has changed.
      /// </summary>
      [event]
      void onResolutionChanged(uint32 width, uint32 height);

      /// <summary>
      /// Event indicates the source rotation has changed.
      /// Rotation value represents degrees.
      /// </summary>
      [event]
      void onRotationChanged(int rotation);

      /// <summary>
      /// Event indicates the source frame rate has changed
      /// (in frames per second).
      /// </summary>
      [event]
      void onFrameRateChanged(float frameRate);

      /// <summary>
      /// Fires events when an video buffer is available.
      /// </summary>
      [event]
      void onVideoFrame(VideoFrameBufferEvent buffer);

    };
  }
}
